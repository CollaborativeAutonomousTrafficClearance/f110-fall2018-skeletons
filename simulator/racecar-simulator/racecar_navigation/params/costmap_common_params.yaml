#Documentation here is given by ros navigation stack tutorial and racecar repository by Subodh Malgonde
#Links: http://wiki.ros.org/navigation/Tutorials/RobotSetup
#https://bitbucket.org/subodhmalgonde/racecar/src/master/

#Code is developed by Subodh Malgonde

#---standard pioneer footprint---
#---(in meters)---
#footprint: [ [0.254, -0.0508], [0.1778, -0.0508], [0.1778, -0.1778], [-0.1905, -0.1778], [-0.254, 0], [-0.1905, 0.1778], [0.1778, 0.1778], [0.1778, 0.0508], [0.254, 0.0508] ]
footprint: [ [-0.28,-0.15], [0.28,-0.15], [0.28,0.15], [-0.28, 0.15] ]
#Here we set either the footprint of the robot or the radius of the robot if it is circular. 
#In the case of specifying the footprint, the center of the robot is assumed to be at (0.0, 0.0) 
#and both clockwise and counterclockwise specifications are supported.

transform_tolerance: 0.2
map_type: costmap

obstacle_layer:
 enabled: true
 #The "obstacle_range" parameter determines the maximum range sensor reading that will result in an obstacle being put into the costmap. 
 #Here, we have it set at 3 meters, which means that the robot will only update its map with information about obstacles that are within 3 meters of the base.
 obstacle_range: 3.0 

 #The "raytrace_range" parameter determines the range to which we will raytrace freespace given a sensor reading
 #Setting it to 3.5 meters as we have above means that the robot will attempt to clear out space in front of it up to 3.0 meters away given a sensor reading.    
 raytrace_range: 3.5

 #The inflation radius should be set to the maximum distance from obstacles at which a cost should be incurred. 
 #For example, setting the inflation radius at 0.20 meters means that the robot will treat all paths that stay 0.20 meters or 
 #more away from obstacles as having equal obstacle cost.
 inflation_radius: 0.20


 track_unknown_space: false
 combination_method: 1

 observation_sources: laser_scan_sensor
 #The "observation_sources" parameter defines a list of sensors that are going to be passing information 
 #to the costmap separated by spaces. In our case, we use only laser scan 

 laser_scan_sensor: {data_type: LaserScan, frame_name: laser, topic: scan, marking: true, clearing: true}
 #This line sets parameters on a sensor mentioned in observation_sources, and this example defines laser_scan_sensor as an example. 
 #The "frame_name" parameter should be set to the name of the coordinate frame of the sensor, (Not used)
 #the "data_type" parameter should be set to LaserScan or PointCloud depending on which message the topic uses, 
 #and the "topic_name" should be set to the name of the topic that the sensor publishes data on. 
 #The "marking" and "clearing" parameters determine whether the sensor will be used to add obstacle information to the costmap, 
 #clear obstacle information from the costmap, or do both.


inflation_layer:
  enabled:              true
  cost_scaling_factor:  10.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.20  # max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true
  map_topic:            "/map"
